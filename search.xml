<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>哔哩哔哩笔试</title>
    <url>/2022/09/07/%E7%AC%94%E7%BB%8F/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9/</url>
    <content><![CDATA[ <span id="more"></span>
<h3 id="题型：单选15题-75分-编程题2题-25分-，限时1h"><a href="#题型：单选15题-75分-编程题2题-25分-，限时1h" class="headerlink" title="题型：单选15题(75分) + 编程题2题(25分)，限时1h"></a>题型：单选15题(75分) + 编程题2题(25分)，限时1h</h3><h3 id="题目-https-www-nowcoder-com-discuss-1036819"><a href="#题目-https-www-nowcoder-com-discuss-1036819" class="headerlink" title="题目 https://www.nowcoder.com/discuss/1036819"></a>题目 <code>https://www.nowcoder.com/discuss/1036819</code></h3><h3 id="单选题：（这里写几个有比较重要的吧）"><a href="#单选题：（这里写几个有比较重要的吧）" class="headerlink" title="单选题：（这里写几个有比较重要的吧）"></a>单选题：（这里写几个有比较重要的吧）</h3><ol>
<li><p>https是没有加密域名</p>
</li>
<li><p>怎么能准确计算0.1+0.2呢？(0.1 + 0.2) * 100 / 100 不行，因为已经计算过0.1+0.2了，没差别</p>
</li>
<li><p>302临时重定向，301、302两个重定向考察得还挺多的。</p>
</li>
<li><p>跨域时不会触发OPTIONS请求?<code>https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82</code></p>
<ol>
<li>不会触发OPTIONS请求，即要求该请求是简单请求。根据上述规则可以确定，选项中仅Content-Type、Accept可以手动配置，且Content-Type的范围有限制，应为“text/plain、multipart/form-data、application/x-www-form-urlencoded”三者之一。所以正确选项为’Accept: application/json’</li>
</ol>
</li>
<li><p>代码题1-这题考察了<code>异步代码中的错误处理</code>，看看try-catch、await、async那些</p>
</li>
<li><p>代码题4-考察了this指向，为啥最后两个是b、d呢？注意定义箭头函数的时候是在对象方法执行的时候，而不是一开始，一开始没有执行创建箭头函数的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="variable language_">window</span>.<span class="property">value</span> = <span class="string">&#x27;v&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callArrowFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fun</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行我&#x27;</span>, <span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrowFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是啥&#x27;</span>, <span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: callArrowFun,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj3 = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: arrowFun,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>();      <span class="comment">// v</span></span><br><span class="line">obj1.<span class="title function_">fn</span>(); <span class="comment">// a</span></span><br><span class="line">obj2.<span class="title function_">fn</span>(); <span class="comment">// b</span></span><br><span class="line">obj3.<span class="title function_">fn</span>(); <span class="comment">// d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj4 = &#123;</span><br><span class="line">  <span class="attr">value</span>:<span class="string">&#x27;e&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj4.<span class="title function_">fn</span>()  <span class="comment">// v 这是创建的时候取全局的value</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>
<h3 id="算法题："><a href="#算法题：" class="headerlink" title="算法题："></a>算法题：</h3></li>
<li><p>编辑距离<br>解析：这是力扣第72题编辑距离，考察了动态规划。要多想一想，注意细节</p>
</li>
<li><p>括号有效的变形问题</p>
</li>
</ol>
<ul>
<li>我觉得题目描述有问题，一是没有说明只有一处不符合需要补充，仅仅是从用例看出来的，二是没有说至少如何修改。所以好多人只做出60%来。下面我结合自己的理解，完善题干，并给出解答。</li>
<li>题目描述，大中小括号能成对即为有效，如果发现不能配对，则应补上缺失的括号，返回缺失的括号及其位置，要求补充的括号数最少。参数为括号数组，输出结果为括号及位置。</li>
<li>用例：[“[“, “]”, “(“, “{“, “[“, “}”, “)”];  应输出<code>],5</code>。即在位置5处补上’]’</li>
</ul>
]]></content>
      <categories>
        <category>笔经</category>
      </categories>
      <tags>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo&amp;Next建站踩坑纪要</title>
    <url>/2022/09/07/%E4%B8%87%E6%81%B6%E4%B9%8B%E6%BA%90%E2%80%94%E2%80%94%E5%BB%BA%E7%AB%99%E5%8F%8A%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[ <span id="more"></span>
<p><img src="https://img1.imgtp.com/2022/09/07/PTKDcUqe.jpg" alt="图片链接"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>早就有建立个人博客的想法，明明有那么多的博客平台为啥要自己建呢？可能就是无聊想折腾吧。</p>
<p>我最初想的从零开始，自己买个服务器，搭建前后台…… 但这个目标太远大，往往是想一想、加上手头有其他事情就放弃了。目标定得太大会让人望而生畏。现在是招聘季，正好总结一下自己2年来的学习经历，一举两得。</p>
<p>这是用Hexo + Next + Github搭建的个人博客。起初看到这些新名词就有点恐惧，但是程序员怎么能怕折腾呢。首先Github就提供搭建静态页面的功能，只要选择一个仓库，在其中写一些html页面就好了，但是没有维持下去，加之确实不好看，就慢慢失去兴趣了。Hexo就是一个建站的框架，Next是一种模板，我选择他是因为这个模板用的人多，遇到问题也好解决。Next里有很多模板引擎的内容。</p>
<p>Hexo + Next会自动将生成的public文件夹部署到github仓库中，就省去自己把github的仓库拉到本地，再每天push了。而且写博客是用md写的，不用写原生的html。</p>
<p>也算是半自动化地建了一个博客吧。</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>站已经建完啦，暂时也不用安装什么包了，日常维护只要以下几个命令就好了</li>
<li>hexo n 文件名   #自动生成博客，且自动添加Front-matter</li>
<li>hexo s   #启动服务预览，即在本地打开搭建完的博客，便于预览调试吧。默认的路径是<code>http://localhost:4000/</code></li>
<li>hexo g  #将博客打包成public文件夹</li>
<li>hexo d  #将打包的public文件夹部署到设置的github仓库中，即上线了。</li>
<li>hexo clean  # 清楚缓存，当发现修改没用的时候，就要执行这个命令了。博客打包、部署之前一定要运行下这个命令</li>
</ul>
<h3 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h3><ul>
<li>首页文章的预览功能<!-- more -->不生效<ul>
<li>在文章的Front-matter中添加description即可</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>满帮笔试</title>
    <url>/2022/09/07/%E7%AC%94%E7%BB%8F/%E6%BB%A1%E5%B8%AE/</url>
    <content><![CDATA[ <span id="more"></span>
<h3 id="前言-1-5h、单选题30-2分-编程题2-20分"><a href="#前言-1-5h、单选题30-2分-编程题2-20分" class="headerlink" title="前言: 1.5h、单选题30 * 2分 + 编程题2 * 20分"></a>前言: 1.5h、单选题30 * 2分 + 编程题2 * 20分</h3><h3 id="单选题："><a href="#单选题：" class="headerlink" title="单选题："></a>单选题：</h3><p>考了2道Linux、fixed相对于谁定位、flex子元素居中的属性、清除浮动的写法、JS一大堆、delete删除元素的返回值、交换器隔离冲突域、奇校验[哈哈，竟然考到这个了]、callee属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> b);</span><br></pre></td></tr></table></figure>
<h3 id="编程题："><a href="#编程题：" class="headerlink" title="编程题："></a>编程题：</h3><ol>
<li>考察了用递归返回嵌套数据中的目标信息，但是数据给得太少了，就直接手写了<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">find</span>(<span class="params">code</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;100&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;上海&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;101&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;上海 浦东&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;102&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;上海 浦西&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;200&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;杭州&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;201&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;杭州 西湖&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;221&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;杭州 西湖 黄龙时代&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;202&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;杭州 余杭&quot;</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">find</span>(<span class="string">&quot;221&quot;</span>));</span><br></pre></td></tr></table></figure></li>
<li>农场有一只一岁的羊，它在第二年、第四年就会生一只羊，生下来记为1岁，在第五年死去，问第n年农场有多少只羊。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSheep</span>(<span class="params">year</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ageCount = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    num = [<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= year; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = num[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> newBorn = ageCount[<span class="number">1</span>] + ageCount[<span class="number">3</span>],</span><br><span class="line">      died = ageCount[<span class="number">4</span>];</span><br><span class="line">    res += newBorn;</span><br><span class="line">    res -= died;</span><br><span class="line">    num[i] = res;</span><br><span class="line">    <span class="comment">// 更新ageCount</span></span><br><span class="line">    <span class="keyword">let</span> temp1 = ageCount[<span class="number">1</span>],</span><br><span class="line">      temp2 = ageCount[<span class="number">2</span>],</span><br><span class="line">      temp3 = ageCount[<span class="number">3</span>];</span><br><span class="line">    ageCount = [<span class="number">0</span>, newBorn, temp1, temp2, temp3];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num[year];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSheep</span>(<span class="number">10</span>));</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>笔经</category>
      </categories>
      <tags>
        <tag>导航</tag>
      </tags>
  </entry>
</search>
